{"ast":null,"code":"import _slicedToArray from \"C:/Users/User/Documents/GitHub/product-fit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { groupKeysMap } from '../../_util/transKeys';\nfunction useData(dataSource, rowKey, targetKeys) {\n  var mergedDataSource = React.useMemo(function () {\n    return (dataSource || []).map(function (record) {\n      if (rowKey) {\n        record = Object.assign(Object.assign({}, record), {\n          key: rowKey(record)\n        });\n      }\n      return record;\n    });\n  }, [dataSource, rowKey]);\n  var _React$useMemo = React.useMemo(function () {\n      var leftData = [];\n      var rightData = new Array((targetKeys || []).length);\n      var targetKeysMap = groupKeysMap(targetKeys || []);\n      mergedDataSource.forEach(function (record) {\n        // rightData should be ordered by targetKeys\n        // leftData should be ordered by dataSource\n        if (targetKeysMap.has(record.key)) {\n          rightData[targetKeysMap.get(record.key)] = record;\n        } else {\n          leftData.push(record);\n        }\n      });\n      return [leftData, rightData];\n    }, [mergedDataSource, targetKeys, rowKey]),\n    _React$useMemo2 = _slicedToArray(_React$useMemo, 2),\n    leftDataSource = _React$useMemo2[0],\n    rightDataSource = _React$useMemo2[1];\n  return [mergedDataSource, leftDataSource, rightDataSource];\n}\nexport default useData;","map":{"version":3,"names":["React","groupKeysMap","useData","dataSource","rowKey","targetKeys","mergedDataSource","useMemo","map","record","Object","assign","key","leftData","rightData","Array","length","targetKeysMap","forEach","has","get","push","leftDataSource","rightDataSource"],"sources":["C:/Users/User/Documents/GitHub/product-fit/node_modules/antd/es/transfer/hooks/useData.js"],"sourcesContent":["import * as React from 'react';\nimport { groupKeysMap } from '../../_util/transKeys';\nfunction useData(dataSource, rowKey, targetKeys) {\n  const mergedDataSource = React.useMemo(() => (dataSource || []).map(record => {\n    if (rowKey) {\n      record = Object.assign(Object.assign({}, record), {\n        key: rowKey(record)\n      });\n    }\n    return record;\n  }), [dataSource, rowKey]);\n  const [leftDataSource, rightDataSource] = React.useMemo(() => {\n    const leftData = [];\n    const rightData = new Array((targetKeys || []).length);\n    const targetKeysMap = groupKeysMap(targetKeys || []);\n    mergedDataSource.forEach(record => {\n      // rightData should be ordered by targetKeys\n      // leftData should be ordered by dataSource\n      if (targetKeysMap.has(record.key)) {\n        rightData[targetKeysMap.get(record.key)] = record;\n      } else {\n        leftData.push(record);\n      }\n    });\n    return [leftData, rightData];\n  }, [mergedDataSource, targetKeys, rowKey]);\n  return [mergedDataSource, leftDataSource, rightDataSource];\n}\nexport default useData;"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,YAAY,QAAQ,uBAAuB;AACpD,SAASC,OAAO,CAACC,UAAU,EAAEC,MAAM,EAAEC,UAAU,EAAE;EAC/C,IAAMC,gBAAgB,GAAGN,KAAK,CAACO,OAAO,CAAC;IAAA,OAAM,CAACJ,UAAU,IAAI,EAAE,EAAEK,GAAG,CAAC,UAAAC,MAAM,EAAI;MAC5E,IAAIL,MAAM,EAAE;QACVK,MAAM,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEF,MAAM,CAAC,EAAE;UAChDG,GAAG,EAAER,MAAM,CAACK,MAAM;QACpB,CAAC,CAAC;MACJ;MACA,OAAOA,MAAM;IACf,CAAC,CAAC;EAAA,GAAE,CAACN,UAAU,EAAEC,MAAM,CAAC,CAAC;EACzB,qBAA0CJ,KAAK,CAACO,OAAO,CAAC,YAAM;MAC5D,IAAMM,QAAQ,GAAG,EAAE;MACnB,IAAMC,SAAS,GAAG,IAAIC,KAAK,CAAC,CAACV,UAAU,IAAI,EAAE,EAAEW,MAAM,CAAC;MACtD,IAAMC,aAAa,GAAGhB,YAAY,CAACI,UAAU,IAAI,EAAE,CAAC;MACpDC,gBAAgB,CAACY,OAAO,CAAC,UAAAT,MAAM,EAAI;QACjC;QACA;QACA,IAAIQ,aAAa,CAACE,GAAG,CAACV,MAAM,CAACG,GAAG,CAAC,EAAE;UACjCE,SAAS,CAACG,aAAa,CAACG,GAAG,CAACX,MAAM,CAACG,GAAG,CAAC,CAAC,GAAGH,MAAM;QACnD,CAAC,MAAM;UACLI,QAAQ,CAACQ,IAAI,CAACZ,MAAM,CAAC;QACvB;MACF,CAAC,CAAC;MACF,OAAO,CAACI,QAAQ,EAAEC,SAAS,CAAC;IAC9B,CAAC,EAAE,CAACR,gBAAgB,EAAED,UAAU,EAAED,MAAM,CAAC,CAAC;IAAA;IAdnCkB,cAAc;IAAEC,eAAe;EAetC,OAAO,CAACjB,gBAAgB,EAAEgB,cAAc,EAAEC,eAAe,CAAC;AAC5D;AACA,eAAerB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}